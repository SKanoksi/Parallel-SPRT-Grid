/*************************************
     Parallel Shortest Path Solver
             developed by
 Somrath Kanoksirirath
 Fourth year physics student,
 Faculty of Science,
 Mahidol University, Thailand.
*************************************/

#version 430 core
layout(local_size_x=BLOCK_X, local_size_y=BLOCK_Y, local_size_z=1) in;

// Conventional Square Version
// with update map (4 barriers)
// without edge reduction

// Check std::replace at PSPS_OpenGL_2D_Solver.Init()
#define shared_X SHARED_X
#define shared_Y SHARED_Y
#define group_X  GROUP_X
#define group_Y  GROUP_Y
#define radius_X RADIUS_X
#define radius_Y RADIUS_Y
#define scale_X STRIDE_X
#define scale_Y STRIDE_Y

// Data Maps
layout(binding = 0, r32f) readonly uniform  image2D SlownessMap ;
layout(binding = 1, r32f) readonly uniform  image2D inTraveltime ;
layout(binding = 2, r32i) readonly uniform iimage2D inUpdate ;

layout(binding = 3, r32f) writeonly uniform  image2D outTraveltime ;
layout(binding = 4, r32i) writeonly uniform iimage2D outUpdate ;
layout(binding = 5, r32i) writeonly uniform iimage2D RaypathMap ;

layout(std430, binding = 6) buffer SSBO{
     int running ;
} ssbo ;

// Constant values
ivec2 shift = ivec2( radius_X, radius_Y ) ;


/***** Main program *****/

shared bool isAnyUpdated ;
shared bool needUpdate  ;
shared float Slowness[shared_X][shared_Y] ;
shared float Traveltime[shared_X][shared_Y] ;

// Upload Slowness x4 and Traveltime x4 to shared memory
void uploadShared()
{
	// (1,1)
    ivec2    ptrMap = ivec2( gl_GlobalInvocationID.xy ) ;
    ivec2 ptrShared = ivec2( gl_LocalInvocationID.xy ) ;
	  Slowness[ ptrShared.x ][ ptrShared.y ] = imageLoad(  SlownessMap, ptrMap ).x ;
	Traveltime[ ptrShared.x ][ ptrShared.y ] = imageLoad( inTraveltime, ptrMap ).x ;

	// (2,1)
       ptrMap.x += 2*shift.x ;
	ptrShared.x += 2*shift.x ;
	  Slowness[ ptrShared.x ][ ptrShared.y ] = imageLoad(  SlownessMap, ptrMap ).x ;
	Traveltime[ ptrShared.x ][ ptrShared.y ] = imageLoad( inTraveltime, ptrMap ).x ;

	 // (2,2)
	   ptrMap.y += 2*shift.y ;
	ptrShared.y += 2*shift.y ;
	  Slowness[ ptrShared.x ][ ptrShared.y ] = imageLoad(  SlownessMap, ptrMap ).x ;
	Traveltime[ ptrShared.x ][ ptrShared.y ] = imageLoad( inTraveltime, ptrMap ).x ;

	 // (1,2)
       ptrMap.x -= 2*shift.x ;
	ptrShared.x -= 2*shift.x ;
	  Slowness[ ptrShared.x ][ ptrShared.y ] = imageLoad(  SlownessMap, ptrMap ).x ;
	Traveltime[ ptrShared.x ][ ptrShared.y ] = imageLoad( inTraveltime, ptrMap ).x ;

}


// Calculate Weight (Slowness*LineWeight)
float findWeight(in const int ix, in const int iy, in const ivec2 Source) // (ix,iy) = relative directional vector wrt. source(posOnShmem)
{
    int nX = abs(ix), nY = abs(iy) ;
	
	const vec2  fVec   =  vec2( ix, iy) ;
	const vec2  stride =  vec2( 1.0f/nX, 1.0f/nY ) ;

    float crossX = 1.0f - 0.5f*stride.x ;
    float crossY = 1.0f - 0.5f*stride.y ;
	
	float Weight   = 0 ;	
	float crossOld = 1.0f ;


	// Main process
	while( 0 < nX || 0 < nY )
	{
	    if( crossX < crossY ){
	        
	        // Compute weight (Y)
		    ivec2 index = Source + ivec2( round( 0.5f*(crossOld+crossY)*fVec ) ) ;
		    Weight += Slowness[index.x][index.y]*(crossOld-crossY) ;

		    // For next crossing point.
		    crossOld = crossY ;
		    --nY ;
		    crossY -= stride.y ;
	        
	    }else{
	    
	    	// Compute weight (X)
		    ivec2 index = Source + ivec2( round( 0.5f*(crossOld+crossX)*fVec ) ) ;
		    Weight += Slowness[index.x][index.y]*(crossOld-crossX) ;

		    // For next crossing point.
		    crossOld = crossX ;
		    --nX ;
		    crossX -= stride.x ;
	    
	    }

	}
	// Weight at source
	Weight += Slowness[Source.x][Source.y]*crossOld ;
    Weight *= length( vec2( ix*scale_X , iy*scale_Y) ) ;

return Weight ;}

/// Compare New and Old traveltime
void compareTraveltime()
{
	const ivec2 posWorker = ivec2(gl_LocalInvocationID.xy) + shift ; // posWorker on shMem
	float Tt = Traveltime[posWorker.x][posWorker.y] ;
	int rayPath = -100 ;
    const int stride = int(group_X) ;

	// Comparing neighbor != (0,0)

	// j<0
	for(int j = -radius_Y ; j<0 ; ++j )
	{
		for(int i = -radius_X ; i <= radius_X ; ++i )
		{
			float newTt = Traveltime[ posWorker.x+i ][ posWorker.y+j ] + findWeight( i,j , posWorker) ;
			if( newTt<Tt ){
				Tt = newTt ;
				rayPath = stride*(shift.y+j)+(shift.x+i) ;
			}
		}
	}

	// j = 0, i<0 and 0<i
	int j = 0 ;
	// i<0
	for(int i = -radius_X ; i < 0 ; ++i )
	{
		float newTt = Traveltime[ posWorker.x+i ][ posWorker.y+j ] + findWeight( i,j , posWorker) ;
		if( newTt<Tt ){
			Tt = newTt ;
			rayPath = stride*(shift.y+j)+(shift.x+i) ;
		}
	}
	// 0<i
	for(int i = 1 ; i <= radius_X ; ++i )
	{
		float newTt = Traveltime[ posWorker.x+i ][ posWorker.y+j ] + findWeight( i,j , posWorker) ;
		if( newTt<Tt ){
			Tt = newTt ;
			rayPath = stride*(shift.y+j)+(shift.x+i) ;
		}
	}

    // 0<j
	for(int j = 1 ; j <= radius_Y ; ++j )
	{
		for(int i = -radius_X ; i <= radius_X ; ++i )
		{
			float newTt = Traveltime[ posWorker.x+i ][ posWorker.y+j ] + findWeight( i,j , posWorker) ;
			if( newTt<Tt ){
				Tt = newTt ;
				rayPath = stride*(shift.y+j)+(shift.x+i) ;
			}
		}
	}

	// Write outTraveltime
	imageStore( outTraveltime, ivec2( gl_GlobalInvocationID.xy+shift ), vec4( Tt, 0,0,0) );

	// if threadUpdate -> isAnyUpdated = true ;
	if( rayPath != -100 ){
        isAnyUpdated = true ;
        imageStore( RaypathMap, ivec2( gl_GlobalInvocationID.xy ), ivec4( rayPath, 0,0,0) );
	}

}

void main()
{

	/// Need update ?
	if( gl_LocalInvocationIndex==0 ){
		needUpdate   = false ;
		isAnyUpdated = false ;
	}
	memoryBarrierShared(); barrier();
    if(  all(lessThan( gl_LocalInvocationID.xy, uvec2(3,3) ))  ){
        if( bool( imageLoad( inUpdate, ivec2(gl_WorkGroupID.xy+gl_LocalInvocationID.xy) ).x ) ){
            needUpdate = true ;
        }
	}
	memoryBarrierShared(); barrier();
	if( !needUpdate ){ return; }



	/// Upload Slowness x4 and Traveltime x4 to shared memory
	uploadShared();
	memoryBarrierShared(); barrier();

	/// Compare New and Old traveltime
	compareTraveltime();
	memoryBarrierShared(); barrier();



	/// IsUpdate ? -> update running and UpdateMap.
	if( gl_LocalInvocationIndex==0 ){
        if( isAnyUpdated ){
            ++ssbo.running ;
            //atomicAdd(ssbo.running,1);
        }
		imageStore( outUpdate, ivec2( gl_WorkGroupID.x+1, gl_WorkGroupID.y+1 ),  ivec4( isAnyUpdated,0,0,0) );
	}


}
